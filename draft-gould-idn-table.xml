<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
 "http://xml.resource.org/authoring/rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3688 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3688.xml">
<!ENTITY RFC5730 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5730.xml">
<!ENTITY RFC5731 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5731.xml">
<!ENTITY RFC5890 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5890.xml">
<!ENTITY RFC7451 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7451.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
<!ENTITY I-D.ietf-eppext-idnmap PUBLIC ''
   'http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-eppext-idnmap.xml'>
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="yes"?>
<!-- keep one blank line between list items -->
<?rfc comments="yes" ?>
<!-- show cref output -->
<?rfc inline="yes" ?>
<!-- inline cref output -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-gould-idn-table-04" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <title abbrev="idnTableMap">
    Extensible Provisioning Protocol (EPP) Internationalized Domain Name (IDN) Table Mapping</title>

    <author fullname="James Gould" initials="J.G" surname="Gould">
      <organization>VeriSign, Inc.</organization>

      <address>
        <postal>
          <street>12061 Bluemont Way</street>

          <city>Reston</city>

          <region>VA</region>

          <code>20190</code>

          <country>US</country>
        </postal>

        <email>jgould@verisign.com</email>

        <uri>http://www.verisigninc.com</uri>
      </address>
    </author>

    <author fullname="Francisco Obispo" initials="F.O" surname="Obispo">
      <organization>Uniregistry Corp.</organization>

      <address>
        <postal>
          <street>3-110 Governors Square</street>

          <city>Grand Cayman, Grand Cayman  KY1-1108</city>

          <country>KY</country>

        </postal>

        <email>fobispo@uniregistry.com</email>

        <uri>http://www.uniregistry.com/</uri>
      </address>
    </author>

    <author fullname="Luis Enrique Muñoz" initials="L.M" surname="Muñoz">
      <organization>Uniregistry Corp.</organization>

      <address>
        <postal>
          <street>3-110 Governors Square</street>

          <city>Grand Cayman, Grand Cayman  KY1-1108</city>

          <country>KY</country>

        </postal>

        <email>fobispo@uniregistry.com</email>

        <uri>http://www.uniregistry.com/</uri>
      </address>
    </author>

    <date day="17" month="April" year="2017"/>

    <abstract>
      <t>This document describes an Extensible Provisioning Protocol (EPP)
      mapping for getting Internationalized Domain Name (IDN) Table 
      information for the registration of IDNs, using the EPP 
      domain name mapping, and optionally with the IDN mapping extension.  
      An IDN Table defines the valid set of characters (code points) that 
      can be used in a domain name.  Code points may overlap across IDN Tables 
      and the IDN Tables supported by the servers are up to server policy.</t>
      <t>The IDN Table information can be 
      used to validate an IDN prior to registration, can be cached 
      by the client for pre-validation, can be used to select the best 
      IDN Table for the IDN, and can be used to know if and what 
      IDN Table Identifier to pass in a domain create.</t>
    </abstract>
        
  </front>

  <middle>
    <section title="Introduction">
      <t>This document describes an extension mapping for version 1.0 of the
      <xref target="RFC5730">Extensible Provisioning Protocol (EPP)</xref>.
      This EPP mapping provides Internationalized Domain Name (IDN) Table 
      information for the registration of IDNs, using the <xref target="RFC5731">EPP 
      domain name mapping</xref>, and optionally with the 
      <xref target="I-D.ietf-eppext-idnmap">IDN mapping extension</xref>.  
      An IDN Table defines the valid set of characters (code points) that 
      can be used in a domain name.  Code points may overlap across IDN Tables 
      and the IDN Tables supported by the servers are up to server policy.  
      This mapping provides the information clients need to register IDNs  
      across a variety of servers with differing IDN policies.
      The IDN Table Mapping can be used for the following:</t>
      
	   <t><list hangIndent="4" style="hanging">
			<t hangText="&quot;Validate IDN Domain Name&quot;">Validate that an IDN meets the server 
			IDN policy.  The validation can be done prior to submitting a domain create, per <xref target="RFC5731"/>.</t>	
		
			<t hangText="&quot;Get IDN Tables Matching IDN Domain Name Along with Meta-Data&quot;">Since IDN Table code points may overlap, the mapping 
			can be used to identify the matching set of IDN Tables (language or script), along with the IDN Table meta-data.</t>		
			
			<t hangText="&quot;Cache IDN Table Code Points&quot;">Clients can query for the complete list of IDN Tables and 
			can get the IDN Table meta-data, based on server policy, to support 
			pre-validation in the client.</t>	
			
			<t hangText="&quot;Get the IDN Table Identifier to Pass with a Domain Create&quot;">Each IDN Table includes 
			a server unique IDN Table Identifier that may be used as the value of the &lt;idn:table&gt; element 
			in the <xref target="I-D.ietf-eppext-idnmap">IDN mapping extension</xref>.  A flag indicates 
			whether the <xref target="I-D.ietf-eppext-idnmap">IDN mapping extension</xref> is needed for the 
			domain name.</t>	
			
	  </list></t>
      

      <section title="Conventions Used in This Document">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>

        <t>XML is case sensitive. Unless stated otherwise, XML specifications
        and examples provided in this document MUST be interpreted in the
        character case presented in order to develop a conforming
        implementation.</t>
        
        <t>In examples, "C:" represents lines sent by a protocol client and "S:" represents lines returned by a protocol server.  
        Indentation and white space in examples are provided only to illustrate element relationships 
        and are not a REQUIRED feature of this protocol.        
        </t>

        <t>"idnTable-1.0" is used as an abbreviation for
        "urn:ietf:params:xml:ns:idnTable-1.0". The XML namespace prefix 
        "idnTable" is used, but implementations MUST NOT depend on 
        it and instead employ
        a proper namespace-aware XML parser and serializer to interpret and
        output the XML documents.</t>
      </section>
    </section>

    <section anchor="attrs" title="Object Attributes">
    
      <t>An EPP IDN Table object has attributes and associated values 
      that can help in the registration of IDNs.  This 
      section describes each type in detail.  The formal syntax 
      for the attribute values described here can be found in the "Formal Syntax" section 
      of this document and in the appropriate normative references.</t>
      
      <section anchor="idnTableIdentifier" title="IDN Table Identifier">
        
        <t>The IDN Table Identifier is a server-defined unique value for 
        an IDN Table object.  It is represented using an &lt;idnTable:table&gt; 
        element or an &lt;idnTable:name&gt; element.  The IDN Table Identifier is used in the &lt;check&gt; 
        and &lt;info&gt; commands and responses.  The IDN Table Identifier MAY 
        also be used as the value for the <xref target="I-D.ietf-eppext-idnmap">IDN mapping extension</xref> 
        &lt;idn:table&gt; element with a domain create of an IDN object.</t>
        
      </section> 

      <section anchor="domainName" title="Domain Name">
        
        <t>A Domain Name, as represented by an &lt;idnTable:domain&gt; element, is 
        used to enable validating the code points against 
        the server IDN Tables and IDN policies and for retrieving IDN 
        Table information associated with the domain name.  The Domain Name 
        MUST be represented as either a U-label or A-label as defined in <xref target="RFC5890"/>.</t>
        
        <t>An OPTIONAL attribute "form" MAY be used to specify the representation.
          When present, the "form" attribute MUST be set to either "aLabel" 
          for A-label or "uLabel" for U-label, 
          depending on the chosen representation for the domain name.  The 
          default "form" attribute is "aLabel" for A-label.</t>
                
      </section> 
 
    </section>

    <section anchor="commands" title="EPP Command Mapping">
      <t>A detailed description of the EPP syntax and semantics can be found
      in the EPP core protocol specification <xref target="RFC5730"/>.</t>
      
      <section anchor="queryCommands" title="EPP Query Commands">
      
        <t>EPP provides three commands to retrieve object information: &lt;check&gt; to determine 
        if an object is known to the server, &lt;info&gt; to retrieve detailed information associated 
        with an object, and &lt;transfer&gt; to retrieve object transfer status information.</t>

      <section anchor="checkCommand" title="EPP &lt;check&gt; Command">
      
       <t>There are two forms of the EPP &lt;check&gt; command: 
       the <xref target="domainCheckForm">Domain Check Form</xref> and 
       the <xref target="tableCheckForm">Table Check Form</xref>.</t>
       
       <section anchor="domainCheckForm" title="Domain Check Form">
         <t>The Domain Check Form is used to check the validity of the domain 
         name against the server IDN Tables and IDN policies,  
         return whether the <xref target="I-D.ietf-eppext-idnmap">IDN mapping extension</xref> 
         is needed with a domain &lt;create&gt; command, and provide the matching list of IDN Table Identifiers.  
         This mapping is not intended to determine the availability of the domain name.</t> 
         
         <t>In addition to the standard EPP command elements, the &lt;check&gt; command 
         MUST contain an &lt;idnTable:check&gt; element that identifies the idnTable namespace.  
         The &lt;idnTable:check&gt; element in the Domain Check Form contains the following 
         child elements:</t>

	        <t><list hangIndent="4" style="hanging">
			    <t hangText="&lt;idnTable:domain&gt;">One or more &lt;idnTable:domain&gt; elements that contain the fully 
			    qualified names of the domain objects, as defined in <xref target="domainName"/>, to validate.</t>
			  </list></t>
         
       <figure>
            <preamble>Example Domain Check Form &lt;check&gt; command with three IDNs:</preamble>

            <artwork><![CDATA[
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <check>
C:      <idnTable:check
C:       xmlns:idnTable="urn:ietf:params:xml:ns:idnTable-1.0">
C:        <idnTable:domain
C:         form="uLabel">idn1.example</idnTable:domain>
C:        <idnTable:domain
C:         form="aLabel">idn2.example</idnTable:domain>
C:        <idnTable:domain>idn3.example</idnTable:domain>
C:      </idnTable:check>
C:    </check>
C:    <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>]]></artwork>
       </figure>
         
         <t>When a &lt;check&gt; command has been processed successfully, the EPP 
         &lt;resData&gt; element MUST contain a child &lt;idnTable:chkData&gt; element that 
         identifies the idnTable namespace.  The &lt;idnTable:chkData&gt; element in the 
         Domain Check Form contain one or more &lt;idnTable:domain&gt; elements that contain 
         the following child elements:</t>
         
	        <t><list hangIndent="4" style="hanging">
			    <t hangText="&lt;idnTable:name&gt;">The fully qualified name of the domain object, 
			    as defined in <xref target="domainName"/>. The element MUST contain a "valid" attribute 
			    whose value indicates whether 
			    the domain name is valid according to the server IDN Tables and IDN policies.  A 
			    value of "1" or "true" means that the domain name is valid according to the server 
			    IDN Tables and policies.  A value of "0" or "false" means that the domain name is 
			    not valid according to the server IDN Tables and policies.  The element MAY contain 
			    an "idnmap" attribute value that indicates whether the server requires the 
			    use of the <xref target="I-D.ietf-eppext-idnmap">IDN mapping extension</xref> with 
			    a domain create of the domain name.  A value of "1" or "true" means that 
			    the <xref target="I-D.ietf-eppext-idnmap">IDN mapping extension</xref> is required using 
			    one of the &lt;idnTable:table&gt; values.  A value of "0" or "false" means that the 
			    <xref target="I-D.ietf-eppext-idnmap">IDN mapping extension</xref> is not required.</t>
			    
			    <t hangText="&lt;idnTable:reason&gt;">OPTIONAL reason that the domain name is not valid.  
			    If present, this element contains server-specific text to help explain why the domain 
			    name is not valid.  This text MUST be represented in the response language 
			    previously negotiated with the client; an OPTIONAL "lang" attribute MAY be present 
			    to identify the language if the negotiated value is something other than the 
			    default value of "en" (English).</t>
			    
			    <t hangText="&lt;idnTable:table&gt;">Zero or more OPTIONAL &lt;idnTable:table&gt; elements 
			    that contain the server defined IDN Table Identifier, as defined in <xref target="idnTableIdentifier"/>, 
			    that matches the code points of the &lt;idnTable:name&gt; element.  The &lt;idnTable:table&gt; MAY be used as 
			    the value of the &lt;idn:table&gt; element in the <xref target="I-D.ietf-eppext-idnmap">IDN mapping extension</xref> 
			    for creating the IDN object or MAY be used as the value of the &lt;idnTable:table&gt; element 
			    of the <xref target="tableInfoForm">Table Info Form</xref> &lt;info&gt; command, as described in <xref target="infoCommand"/>, to 
			    retrieve more information about the IDN Table.</t>
			  
			  </list></t>

          <figure>
            <preamble>Example Domain Check Form &lt;check&gt; response with three IDNs:</preamble>

            <artwork>
<![CDATA[
S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:  <response>
S:    <result code="1000">
S:      <msg>Command completed successfully</msg>
S:    </result>
S:    <resData>
S:      <idnTable:chkData
S:       xmlns:idnTable="urn:ietf:params:xml:ns:idnTable-1.0">
S:          <idnTable:domain>
S:             <idnTable:name valid="true">
S:             idn1.example</idnTable:name>
S:             <idnTable:table>CHI</idnTable:table>
S:          </idnTable:domain>
S:          <idnTable:domain>
S:             <idnTable:name valid="true" idnmap="true">
S:             idn2.example</idnTable:name>
S:             <idnTable:table>CHI</idnTable:table>
S:             <idnTable:table>JPN</idnTable:table>
S:          </idnTable:domain>
S:          <idnTable:domain>
S:             <idnTable:name valid="false">
S:             idn3.example</idnTable:name>
S:             <idnTable:reason>Commingled scripts
S:             </idnTable:reason>
S:          </idnTable:domain>
S:      </idnTable:chkData>
S:    </resData>
S:    <trID>
S:      <clTRID>ABC-12345</clTRID>
S:      <svTRID>54321-XYZ</svTRID>
S:    </trID>
S:  </response>
S:</epp>]]></artwork>
          </figure>
         
       </section>

       <section anchor="tableCheckForm" title="Table Check Form">

         <t>The Table Check Form is used to check the existence of an IDN Table 
         using the IDN Table Identifier represented by the &lt;idnTable:table&gt; 
         element.</t> 
         
         <t>In addition to the standard EPP command elements, the &lt;check&gt; command 
         MUST contain an &lt;idnTable:check&gt; element that identifies the idnTable namespace.  
         The &lt;idnTable:check&gt; element in the Table Check Form contains the following 
         child elements:</t>

	        <t><list hangIndent="4" style="hanging">
			    <t hangText="&lt;idnTable:table&gt;">One or more &lt;idnTable:table&gt; elements that contain the 
			    IDN Table Identifier, as defined in <xref target="idnTableIdentifier"/>, to check for existence.</t>
			  </list></t>
         
       <figure>
            <preamble>Example Table Check Form &lt;check&gt; command with three IDN Table Identifiers:</preamble>

            <artwork><![CDATA[
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <check>
C:      <idnTable:check
C:       xmlns:idnTable="urn:ietf:params:xml:ns:idnTable-1.0">
C:        <idnTable:table>CHI</idnTable:table>
C:        <idnTable:table>JPN</idnTable:table>
C:        <idnTable:table>INVALID</idnTable:table>
C:      </idnTable:check>
C:    </check>
C:    <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>]]></artwork>
       </figure>


         <t>When a &lt;check&gt; command has been processed successfully, the EPP 
         &lt;resData&gt; element MUST contain a child &lt;idnTable:chkData&gt; element that 
         identifies the idnTable namespace.  The &lt;idnTable:chkData&gt; element in the 
         Table Check Form contains the following child elements:</t>
         
	        <t><list hangIndent="4" style="hanging">
			    <t hangText="&lt;idnTable:table&gt;">One or more &lt;idnTable:table&gt; elements that 
			    contain the IDN Table Identifier, as defined in <xref target="idnTableIdentifier"/>.  
			    The element MUST contain an "exists" attribute whose 
			    value indicates the existence of the IDN Table Identifier. A 
			    value of "1" or "true" means that the IDN Table Identifier exists.  A value of "0" or "false" means 
			    that the IDN Table Identifier does not exist.</t>			    			  
			  </list></t>

          <figure>
            <preamble>Example Table Check Form &lt;check&gt; response with three IDN Table Identifiers:</preamble>

            <artwork>
<![CDATA[
S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:  <response>
S:    <result code="1000">
S:      <msg>Command completed successfully</msg>
S:    </result>
S:    <resData>
S:      <idnTable:chkData
S:       xmlns:idnTable="urn:ietf:params:xml:ns:idnTable-1.0">
S:          <idnTable:table exists="true">CHI
S:          </idnTable:table>
S:          <idnTable:table exists="true">JPN
S:          </idnTable:table>
S:          <idnTable:table exists="false">INVALID
S:          </idnTable:table>
S:      </idnTable:chkData>
S:    </resData>
S:    <trID>
S:      <clTRID>ABC-12345</clTRID>
S:      <svTRID>54321-XYZ</svTRID>
S:    </trID>
S:  </response>
S:</epp>]]></artwork>
          </figure>

         
       </section>
	
      </section>

      <!-- end CHECK command -->

      <section anchor="infoCommand" title="EPP &lt;info&gt; Command">
 
       <t>There are three forms of the EPP &lt;info&gt; command: 
       the <xref target="domainInfoForm">Domain Info Form</xref>,  
       the <xref target="tableInfoForm">Table Info Form</xref>, 
       and the <xref target="listInfoForm">List Info Form</xref>.</t>

       <section anchor="domainInfoForm" title="Domain Info Form">
       
         <t>The Domain Info Form is used to validate the domain name 
         code points against the IDN Tables and IDN policies, and to return the 
         matching IDN Table meta-data.  The domain name, as defined in <xref target="domainName"/> 
         can be provided as either a U-label or A-label.</t>
       
         <t>In addition to the standard EPP command elements, the &lt;info&gt; 
         command MUST contain an &lt;idnTable:info&gt; element that identifies 
         the idnTable namespace. The &lt;idnTable:info&gt; element in the Domain Info Form 
         contains the following child elements:</t>
         
	        <t><list hangIndent="4" style="hanging">
			    <t hangText="&lt;idnTable:domain&gt;">The domain name, as defined in <xref target="domainName"/>, to validate 
			    against the IDN Tables and IDN policies, and to retrieve the matching IDN Table meta-data.</t>			    			  
			  </list></t>
       
       <figure>
            <preamble>Example Domain Info Form &lt;info&gt; command using a 
            U-label Domain Name:</preamble>

            <artwork><![CDATA[
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <info>
C:      <idnTable:info
C:       xmlns:idnTable="urn:ietf:params:xml:ns:idnTable-1.0">
C:        <idnTable:domain>idn1.example</idnTable:domain>
C:      </idnTable:info>
C:    </info>
C:    <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>]]></artwork>
       </figure>
       
       <figure>
            <preamble>Example Domain Info Form &lt;info&gt; command using an 
            A-label Domain Name:</preamble>

            <artwork><![CDATA[
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <info>
C:      <idnTable:info
C:       xmlns:idnTable="urn:ietf:params:xml:ns:idnTable-1.0">
C:        <idnTable:domain>xn--idn1.example</idnTable:domain>
C:      </idnTable:info>
C:    </info>
C:    <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>]]></artwork>
       </figure>
    
         <t>When an &lt;info&gt; command has been processed successfully, the EPP 
         &lt;resData&gt; element MUST contain a child &lt;idnTable:infData&gt; element that 
         identifies the idnTable namespace.  The &lt;idnTable:infData&gt; element in the 
         Domain Info Form contains the &lt;idnTable:domain&gt; element that contains the following child elements:</t>
         
	        <t><list hangIndent="4" style="hanging">
			    <t hangText="&lt;idnTable:name&gt;">The fully qualified name of the domain object, 
			    as defined in <xref target="domainName"/>. The element MUST contain a "valid" attribute 
			    whose value indicates whether 
			    the domain name is valid according to the server IDN Tables and IDN policies.  A 
			    value of "1" or "true" means that the domain name is valid according to the server 
			    IDN Tables and policies.  A value of "0" or "false" means that the domain name is 
			    not valid according to the server IDN Tables and policies.  The element MAY contain 
			    an "idnmap" attribute value that indicates whether the server requires the 
			    use of the <xref target="I-D.ietf-eppext-idnmap">IDN mapping extension</xref> with 
			    a domain create of the domain name.  A value of "1" or "true" means that 
			    the <xref target="I-D.ietf-eppext-idnmap">IDN mapping extension</xref> is required using 
			    one of the &lt;idnTable:table&gt; &lt;idnTable:name&gt; values.  A value of "0" or "false" means that the 
			    <xref target="I-D.ietf-eppext-idnmap">IDN mapping extension</xref> is not required.</t>			    			  
			    <t hangText="&lt;idnTable:uname&gt; or &lt;idnTable:aname&gt;"> OPTIONAL U-label or A-label 
			    form of the domain name value of the &lt;idnTable:name&gt; element in the 
			    opposite form, as defined in <xref target="domainName"/>.</t>			    			  
			    <t hangText="&lt;idnTable:table&gt;">Zero or more OPTIONAL &lt;idnTable:table&gt; elements 
			    that provide the IDN Table meta-data information.  The &lt;idnTable:table&gt; element 
			    contains the following child elements:</t>
			      <t><list hangIndent="4" style="hanging">
					 <t hangText="&lt;idnTable:name&gt;">Server defined IDN Table Identifier, as defined in <xref target="idnTableIdentifier"/>.</t>			    			  
					 <t hangText="&lt;idnTable:type&gt;">The type of the IDN Table with the possible values of "language", 
					 to reflect a Language IDN Table, and "script", to reflect a Script IDN Table.</t>			    			  
					 <t hangText="&lt;idnTable:description&gt;">Server defined description of the IDN Table.  
					 This text MUST be represented in the response language 
					 previously negotiated with the client; an OPTIONAL "lang" attribute MAY be present 
					 to identify the language if the negotiated value is something other than the 
					 default value of "en" (English).</t>			    			  
					 <t hangText="&lt;idnTable:variantGen&gt;">OPTIONAL boolean flag indicating that domains created using the IDN Table will 
					 have IDN variants generated.  The management of variants is up to server policy.</t>			    			  
			      </list></t>
			  </list></t>
    
    
       <figure>
            <preamble>Example Domain Info Form &lt;info&gt; response for a 
            U-label Domain Name:</preamble>

            <artwork><![CDATA[
S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:  <response>
S:    <result code="1000">
S:      <msg>Command completed successfully</msg>
S:    </result>
S:    <resData>
S:      <idnTable:infData
S:       xmlns:idnTable="urn:ietf:params:xml:ns:idnTable-1.0">
S:        <idnTable:domain>
S:          <idnTable:name valid="true">idn1.example
S:          </idnTable:name>
S:          <idnTable:aname>xn--idn1.example</idnTable:aname>
S:          <idnTable:table>
S:            <idnTable:name>THAI</idnTable:name>
S:            <idnTable:type>script</idnTable:type>
S:            <idnTable:description lang="en">Thai
S:            </idnTable:description>
S:            <idnTable:variantGen>false</idnTable:variantGen>
S:          </idnTable:table>
S:        </idnTable:domain>
S:      </idnTable:infData>
S:    </resData>
S:    <trID>
S:      <clTRID>ABC-12345</clTRID>
S:      <svTRID>54321-XYZ</svTRID>
S:    </trID>
S:  </response>
S:</epp>]]></artwork>
       </figure>
       
       <figure>
            <preamble>Example Domain Info Form &lt;info&gt; response for an 
            A-label Domain Name:</preamble>

            <artwork><![CDATA[
S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:  <response>
S:    <result code="1000">
S:      <msg>Command completed successfully</msg>
S:    </result>
S:    <resData>
S:      <idnTable:infData
S:       xmlns:idnTable="urn:ietf:params:xml:ns:idnTable-1.0">
S:        <idnTable:domain>
S:          <idnTable:name valid="true" idnmap="true">
S:          xn--idn1.example
S:          </idnTable:name>
S:          <idnTable:uname>idn1.example</idnTable:uname>
S:          <idnTable:table>
S:            <idnTable:name>CHI</idnTable:name>
S:            <idnTable:type>language</idnTable:type>
S:            <idnTable:description>Chinese (CHI)
S:            </idnTable:description>
S:            <idnTable:variantGen>true</idnTable:variantGen>
S:          </idnTable:table>
S:          <idnTable:table>
S:            <idnTable:name>JPN</idnTable:name>
S:            <idnTable:type>language</idnTable:type>
S:            <idnTable:description>Japanese (JPN)
S:            </idnTable:description>
S:            <idnTable:variantGen>false</idnTable:variantGen>
S:          </idnTable:table>
S:        </idnTable:domain>
S:      </idnTable:infData>
S:    </resData>
S:    <trID>
S:      <clTRID>ABC-12345</clTRID>
S:      <svTRID>54321-XYZ</svTRID>
S:    </trID>
S:  </response>
S:</epp>]]></artwork>
       </figure>
       
       </section>
       
       <section anchor="tableInfoForm" title="Table Info Form">
       
         <t>The Table Info Form is used to retrieve information associated 
         with an IDN Table object.  The information provided meta-data about 
         the IDN Table object.</t> 
         
         <t>In addition to the standard EPP command elements, the &lt;info&gt; 
         command MUST contain an &lt;idnTable:info&gt; element that identifies 
         the idnTable namespace. The &lt;idnTable:info&gt; element in the Table Info Form 
         contains the following child elements:</t>
         
	        <t><list hangIndent="4" style="hanging">
			    <t hangText="&lt;idnTable:table&gt;">Contains the IDN Table Identifier, as defined in <xref target="idnTableIdentifier"/>, of 
			    the IDN Table object to be queried.</t>			    			  
			  </list></t>
       
       <figure>
            <preamble>Example Table Info Form &lt;info&gt; command for the "CHI" 
            IDN Table Identifier, which represents a Language IDN Table:</preamble>

            <artwork><![CDATA[
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <info>
C:      <idnTable:info
C:       xmlns:idnTable="urn:ietf:params:xml:ns:idnTable-1.0">
C:        <idnTable:table>CHI</idnTable:table>
C:      </idnTable:info>
C:    </info>
C:    <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>]]></artwork>
       </figure>
       
       <figure>
            <preamble>Example Table Info Form &lt;info&gt; command for the "THAI" 
            IDN Table Identifier, which represents a Script IDN Table:</preamble>

            <artwork><![CDATA[
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <info>
C:      <idnTable:info
C:       xmlns:idnTable="urn:ietf:params:xml:ns:idnTable-1.0">
C:        <idnTable:table>THAI</idnTable:table>
C:      </idnTable:info>
C:    </info>
C:    <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>]]></artwork>
       </figure>
       
         <t>When an &lt;info&gt; command has been processed successfully, the EPP 
         &lt;resData&gt; element MUST contain a child &lt;idnTable:infData&gt; element that 
         identifies the idnTable namespace.  The &lt;idnTable:infData&gt; element in the 
         Table Info Form contains the &lt;idnTable:table&gt; element that contains the following child elements:</t>
         
	        <t><list hangIndent="4" style="hanging">
			    <t hangText="&lt;idnTable:name&gt;">Server defined IDN Table Identifier, as defined in <xref target="idnTableIdentifier"/>.</t>			    			  
			    <t hangText="&lt;idnTable:type&gt;">The type of the IDN Table with the possible values of "language", 
			    to reflect a Language IDN Table, and "script", to reflect a Script IDN Table.</t>			    			  
			    <t hangText="&lt;idnTable:description&gt;">Server defined description of the IDN Table.  
			    This text MUST be represented in the response language 
			    previously negotiated with the client; an OPTIONAL "lang" attribute MAY be present 
			    to identify the language if the negotiated value is something other than the 
			    default value of "en" (English).</t>			    			  
			    <t hangText="&lt;idnTable:upDate&gt;">Contains the date and time that the IDN Table was created or last updated.</t>
			    <t hangText="&lt;idnTable:version&gt;">OPTIONAL server defined version number of the IDN Table.</t>			    			  
			    <t hangText="&lt;idnTable:effectiveDate&gt;">OPTIONAL effective date for the IDN Table.</t>			    			  
			    <t hangText="&lt;idnTable:variantGen&gt;">OPTIONAL boolean flag indicating that domains created using the IDN Table will 
			    have IDN variants generated.  The management of variants is up to server policy.</t>			    			  
			    <t hangText="&lt;idnTable:url&gt;">OPTIONAL URL for downloading the IDN Table with the applicable set of code points and rules.</t>			    			  
			  </list></t>

          <figure>
            <preamble>Example Table Info Form &lt;info&gt; response for the "CHI" 
            IDN Table Identifier, which represents a Language IDN Table:</preamble>

            <artwork>
<![CDATA[
S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:  <response>
S:    <result code="1000">
S:      <msg>Command completed successfully</msg>
S:    </result>
S:    <resData>
S:      <idnTable:infData
S:       xmlns:idnTable="urn:ietf:params:xml:ns:idnTable-1.0">
S:        <idnTable:table>
S:           <idnTable:name>CHI</idnTable:name>
S:           <idnTable:type>language</idnTable:type>
S:           <idnTable:description lang="en">Chinese (CHI)
S:           </idnTable:description>
S:           <idnTable:upDate>2015-02-04T09:30:00.0Z
S:           </idnTable:upDate>
S:           <idnTable:version>1.0</idnTable:version>
S:           <idnTable:effectiveDate>2014-11-24
S:           </idnTable:effectiveDate>
S:           <idnTable:variantGen>true</idnTable:variantGen>
S:           <idnTable:url>
S:   https://www.iana.org/domains/idn-tables/tables/tld_chi_1.0.txt
S:           </idnTable:url>
S:         </idnTable:table>
S:      </idnTable:infData>
S:    </resData>
S:    <trID>
S:      <clTRID>ABC-12345</clTRID>
S:      <svTRID>54321-XYZ</svTRID>
S:    </trID>
S:  </response>
S:</epp>]]></artwork>
          </figure>

          <figure>
            <preamble>Example Table Info Form &lt;info&gt; response for the "THAI" 
            IDN Table Identifier, which represents a Script IDN Table:</preamble>

            <artwork>
<![CDATA[
S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:  <response>
S:    <result code="1000">
S:      <msg>Command completed successfully</msg>
S:    </result>
S:    <resData>
S:      <idnTable:infData
S:       xmlns:idnTable="urn:ietf:params:xml:ns:idnTable-1.0">
S:        <idnTable:table>
S:           <idnTable:name>THAI</idnTable:name>
S:           <idnTable:type>script</idnTable:type>
S:           <idnTable:description>Thai</idnTable:description>
S:           <idnTable:upDate>2014-08-16T09:20:00.0Z
S:           </idnTable:upDate>
S:           <idnTable:version>1.0</idnTable:version>
S:           <idnTable:effectiveDate>2014-11-24
S:           </idnTable:effectiveDate>
S:           <idnTable:variantGen>false</idnTable:variantGen>
S:           <idnTable:url>
S:  https://www.iana.org/domains/idn-tables/tables/tld_thai_1.0.txt
S:           </idnTable:url>
S:         </idnTable:table>
S:      </idnTable:infData>
S:    </resData>
S:    <trID>
S:      <clTRID>ABC-12345</clTRID>
S:      <svTRID>54321-XYZ</svTRID>
S:    </trID>
S:  </response>
S:</epp>]]></artwork>
          </figure>

       
       </section>
       
       <section anchor="listInfoForm" title="List Info Form">
       
         <t>The List Info Form is used to retrieve the list of IDN 
         Tables supported by the server.  The list of IDN Table Identifiers 
         MAY be used to query for the IDN Table information using the <xref target="tableInfoForm">Table Info Form</xref>.</t> 
         
         <t>In addition to the standard EPP command elements, the &lt;info&gt; 
         command MUST contain an &lt;idnTable:info&gt; element that identifies 
         the idnTable namespace. The &lt;idnTable:info&gt; element in the List Info Form 
         contains the following child elements:</t>
         
	        <t><list hangIndent="4" style="hanging">
			    <t hangText="&lt;idnTable:list&gt;">Empty element used as a marker 
			    to the server of the List Info Form to retrieve the list of 
			    IDN Tables.</t>			    			  
			  </list></t>
       
       <figure>
            <preamble>Example List Info Form &lt;info&gt; command:</preamble>

            <artwork><![CDATA[
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <info>
C:      <idnTable:info
C:       xmlns:idnTable="urn:ietf:params:xml:ns:idnTable-1.0">
C:        <idnTable:list/>
C:      </idnTable:info>
C:    </info>
C:    <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>]]></artwork>
       </figure>

         <t>When an &lt;info&gt; command has been processed successfully, the EPP 
         &lt;resData&gt; element MUST contain a child &lt;idnTable:infData&gt; element that 
         identifies the idnTable namespace.  The &lt;idnTable:infData&gt; element in the 
         List Info Form contains the &lt;idnTable:list&gt; element that contains the following child elements:</t>
         
	        <t><list hangIndent="4" style="hanging">
			    <t hangText="&lt;idnTable:table&gt;">Zero or more &lt;idnTable:table&gt; elements that contain the following 
			    child elements:</t>
			    <t><list hangIndent="4" style="hanging">
			      <t hangText="&lt;idnTable:name&gt;">Server defined IDN Table Identifier, as defined in <xref target="idnTableIdentifier"/>, that 
			    is supported by the server.  The &lt;idnTable:table&gt; element value MAY be used as the value of the 
			    &lt;idnTable:table&gt; element value in the <xref target="tableInfoForm">Table Info Form</xref> &lt;info&gt; command to retrieve 
			    the information on the IDN Table.</t>
			      <t hangText="&lt;idnTable:upDate&gt;">Contains the date and time that the IDN Table was created or last updated.  This element 
			      can be used to determine whether a client-side cache needs to be refreshed for the IDN Table using the <xref target="tableInfoForm">Table Info Form</xref>.</t>
			    </list></t>
			   	    			  
			  </list></t>

          <figure>
            <preamble>Example List Info Form &lt;info&gt; response that 
            contains three IDN Table Identifiers:</preamble>

            <artwork>
<![CDATA[
S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:  <response>
S:    <result code="1000">
S:      <msg>Command completed successfully</msg>
S:    </result>
S:    <resData>
S:      <idnTable:infData
S:       xmlns:idnTable="urn:ietf:params:xml:ns:idnTable-1.0">
S:        <idnTable:list>
S:           <idnTable:table>
S:              <idnTable:name>CHI</idnTable:name>
S:              <idnTable:upDate>2015-02-04T09:30:00.0Z
S:              </idnTable:upDate>
S:           </idnTable:table>
S:           <idnTable:table>
S:              <idnTable:name>JPN</idnTable:name>
S:              <idnTable:upDate>2015-01-01T09:40:00.0Z
S:              </idnTable:upDate>
S:           </idnTable:table>
S:           <idnTable:table>
S:              <idnTable:name>THAI</idnTable:name>
S:              <idnTable:upDate>2014-08-16T09:20:00.0Z
S:              </idnTable:upDate>
S:           </idnTable:table>
S:         </idnTable:list>
S:      </idnTable:infData>
S:    </resData>
S:    <trID>
S:      <clTRID>ABC-12345</clTRID>
S:      <svTRID>54321-XYZ</svTRID>
S:    </trID>
S:  </response>
S:</epp>]]></artwork>
          </figure>

       
       </section>



       
      </section>
      <!-- end INFO command -->
      
      <section anchor="transferQueryCommand" title="EPP &lt;transfer&gt; Command">
      
       <t>Transfer semantics do not apply to IDN table objects, so there is no 
       mapping defined for the EPP &lt;transfer&gt; command.</t>

      </section>
      <!-- end TRANSFER QUERY command -->
      
      </section>
      
      <section anchor="transformCommands" title="EPP Transform Commands">
      
        <t>EPP provides five commands to transform objects: &lt;create&gt; to create an instance of an object, 
        &lt;delete&gt; to delete an instance of an object, &lt;renew&gt; to extend the validity period of an object,
        &lt;transfer&gt; to manage object sponsorship changes, and &lt;update&gt; to change information associated 
        with an object.</t>

      <section anchor="createCommand" title="EPP &lt;create&gt; Command">
      
       <t>Create semantics do not apply to IDN table objects, so there is no 
       mapping defined for the EPP &lt;create&gt; command.</t>
       
      </section>
      <!-- end CREATE command -->

      <section anchor="deleteCommand" title="EPP &lt;delete&gt; Command">
      
       <t>Delete semantics do not apply to IDN table objects, so there is no 
       mapping defined for the EPP &lt;delete&gt; command.</t>
         
      </section>
      <!-- end DELETE command -->

      <section anchor="renewCommand" title="EPP &lt;renew&gt; Command">
      
       <t>Renewal semantics do not apply to IDN table objects, so there is no 
       mapping defined for the EPP &lt;renew&gt; command.</t>
       
      </section>
      <!-- end RENEW command -->
      
      <section anchor="transferCommand" title="EPP &lt;transfer&gt; Command">
      
       <t>Transfer semantics do not apply to IDN table objects, so there is no 
       mapping defined for the EPP &lt;transfer&gt; command.</t>
       
      </section>
      <!-- end TRANSFER command -->
      
      <section anchor="updateCommand" title="EPP &lt;update&gt; Command">
      
       <t>Update semantics do not apply to IDN table objects, so there is no 
       mapping defined for the EPP &lt;update&gt; command.</t>
        
      </section>
      <!-- end UPDATE command -->

    </section>
      
    </section>

    <!-- EPP command mapping -->

    <section anchor="syntax" title="Formal Syntax">
    
      <t>One schema is presented here that is the EPP IDN Table Mapping
      schema.</t>
      
      <t>The formal
      syntax presented here is a complete schema representation of the object
      mapping suitable for automated validation of EPP XML instances. The
      BEGIN and END tags are not part of the schema; they are used to note the
      beginning and ending of the schema for URI registration purposes.</t>

    <section title="IDN Table Mapping Schema">

      <figure>
        <artwork><![CDATA[
BEGIN
<?xml version="1.0" encoding="UTF-8"?>
<schema targetNamespace="urn:ietf:params:xml:ns:idnTable-1.0"
  xmlns:idnTable="urn:ietf:params:xml:ns:idnTable-1.0"
  xmlns:eppcom="urn:ietf:params:xml:ns:eppcom-1.0" 
  xmlns="http://www.w3.org/2001/XMLSchema"
  elementFormDefault="qualified">

  <annotation>
    <documentation>
      Extensible Provisioning Protocol v1.0
      IDN Table Mapping.
    </documentation>
  </annotation>

  <!-- imports -->
  <import namespace="urn:ietf:params:xml:ns:eppcom-1.0" 
    schemaLocation="eppcom-1.0.xsd"/>

  <!-- 
  Child elements found in EPP commands.  
  -->
  <element name="check" type="idnTable:checkType"/>
  <element name="info" type="idnTable:infoType"/>

  <!-- 
   Form of the domain name.
   -->
  <simpleType name="domainFormType">
    <restriction base="token">
      <enumeration value="aLabel"/>
      <enumeration value="uLabel"/>
    </restriction>
  </simpleType>

  <!--
   Domain label element.
  -->
  <complexType name="domainLabelType">
    <simpleContent>
      <extension base="eppcom:labelType">
        <attribute name="form" type="idnTable:domainFormType"
          default="aLabel"/>
      </extension>
    </simpleContent>
  </complexType>
  

  <!-- 
  Child elements of check command.  
  -->
  <complexType name="checkType">
    <sequence>
      <choice>
        <element name="table" type="eppcom:minTokenType" 
          maxOccurs="unbounded"/>
        <element name="domain" type="idnTable:domainLabelType" 
          maxOccurs="unbounded"/>
      </choice>
    </sequence>
  </complexType>


  <!-- 
  Child elements of info command.  
  -->
  <complexType name="infoType">
    <sequence>
      <choice>
        <element name="table" type="eppcom:minTokenType"/>
        <element name="domain" type="idnTable:domainLabelType"/>
        <element name="list"/>
      </choice>
    </sequence>
  </complexType>


  <!-- 
  Child response elements.  
  -->
  <element name="chkData" type="idnTable:chkDataType"/>
  <element name="infData" type="idnTable:infDataType"/>

  <!-- 
  Child elements of check response.  
  -->
  <complexType name="chkDataType">
    <sequence>
      <choice>
        <element name="table" type="idnTable:chkTableType" 
          maxOccurs="unbounded"/>
        <element name="domain" type="idnTable:chkDomainType" 
          maxOccurs="unbounded"/>
      </choice>
    </sequence>
  </complexType>

  <!-- 
  Table check response element  
  -->
  <complexType name="chkTableType">
    <simpleContent>
      <extension base="eppcom:minTokenType">
        <attribute name="exists" type="boolean" use="required"/>
      </extension>
    </simpleContent>
  </complexType>


  <!-- 
  Domain name check response element  
  -->
  <complexType name="domainNameType">
    <simpleContent>
      <extension base="eppcom:labelType">
        <attribute name="valid" type="boolean" use="required"/>
        <attribute name="idnmap" type="boolean" default="true"/>
      </extension>
    </simpleContent>
  </complexType>

  <!-- 
  Domain check response element  
  -->
  <complexType name="chkDomainType">
    <sequence>
      <element name="name" type="idnTable:domainNameType"/>
      <choice>
        <element name="reason" type="eppcom:reasonType"/>
        <element name="table" type="eppcom:minTokenType" 
          maxOccurs="unbounded"/>
      </choice>
    </sequence>
  </complexType>


  <!-- 
  Child elements of info response.  
  -->
  <complexType name="infDataType">
    <sequence>
      <choice>
        <element name="table" type="idnTable:infTableType"/>
        <element name="domain" type="idnTable:infDomainType"/>
        <element name="list" type="idnTable:infListType"/>
      </choice>
    </sequence>
  </complexType>

  <!-- 
  Table types  
  -->
  <simpleType name="tableTypeEnumType">
    <restriction base="token">
      <enumeration value="language"/>
      <enumeration value="script"/>
    </restriction>
  </simpleType>

  <complexType name="descriptionType">
    <simpleContent>
      <extension base="token">
        <attribute name="lang" type="language"/>
      </extension>
    </simpleContent>
  </complexType>


  <!-- 
  Table info response information
  -->
  <complexType name="infTableType">
    <sequence>
      <element name="name" type="eppcom:minTokenType"/>
      <element name="type" type="idnTable:tableTypeEnumType"/>
      <element name="description" type="idnTable:descriptionType"/>
      <element name="upDate" type="dateTime"/>
      <element name="version" type="token" minOccurs="0"/>
      <element name="effectiveDate" type="date" minOccurs="0"/>
      <element name="variantGen" type="boolean" minOccurs="0"/>
      <element name="url" type="anyURI" minOccurs="0"/>
    </sequence>
  </complexType>

  <!-- 
  Domain info response information
  -->
  <complexType name="infDomainType">
    <sequence>
      <element name="name" type="idnTable:domainNameType"/>
      <choice minOccurs="0">
        <element name="uname" type="eppcom:labelType"/>
        <element name="aname" type="eppcom:labelType"/>
      </choice>
      <element name="table" type="idnTable:infDomainTableType" 
        minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>

  <!-- 
  Domain table info response information
  -->
  <complexType name="infDomainTableType">
    <sequence>
      <element name="name" type="eppcom:minTokenType"/>
      <element name="type" type="idnTable:tableTypeEnumType"/>
      <element name="description" type="idnTable:descriptionType"/>
      <element name="variantGen" type="boolean" minOccurs="0"/>
    </sequence>
  </complexType>


  <!-- 
  Table list info response information.
  -->
  <complexType name="infListType">
    <sequence>
      <element name="table" type="idnTable:infListTableType" 
        minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  
  <!--
  Table elements in list info form.
  -->
  <complexType name="infListTableType">
    <sequence>
      <element name="name" type="eppcom:minTokenType"/>
      <element name="upDate" type="dateTime"/>
    </sequence>
  </complexType>

  <!-- End of schema.-->
</schema>
END]]></artwork>
      </figure>
      </section>
    </section>
   
    
    <section anchor="IANA" title="IANA Considerations">
    
    	<section anchor="IANA-XML-Namespace" title="XML Namespace">
         <t>
             This document uses URNs to describe XML namespaces and XML schemas
             conforming to a registry mechanism described in <xref target="RFC3688"/>.
             The following URI assignment is requested of IANA: 
         </t>
                  
         <t>URI: urn:ietf:params:xml:ns:idnTable-1.0</t>
         
         <t>Registrant Contact: See the "Author's Address" section of this document.</t>
          
         <t>XML: See the "Formal Syntax" section of this document.</t>
         
       </section>
       
       <section anchor="EPP-Extension-Registry" title="EPP Extension Registry">
       
       	<t>
   The EPP extension described in this document should be registered by
   the IANA in the EPP Extension Registry described in <xref target="RFC7451"/>.  The
   details of the registration are as follows:
   </t>

   <t>
   Name of Extension: &quot;Extensible Provisioning Protocol (EPP) Internationalized Domain Name (IDN) Table Mapping&quot;
   </t>
   
   <t>
   Document status: Standards Track
   </t>
   
   <t>
   Reference: (insert reference to RFC version of this document)
   </t>

   <t>
   Registrant Name and Email Address: IESG, &lt;iesg@ietf.org&gt;
   </t>
  
   <t>
   TLDs: Any
   </t>
 
   <t>
   IPR Disclosure: None
   </t>

   <t>
   Status: Active
   </t>

   <t>
   Notes: None
   </t>
       
       </section>
     
    </section>


    <section anchor="Security" title="Security Considerations">
      <t>The mapping extensions described in this document do not provide any
      security services beyond those described by <xref
      target="RFC5730">EPP</xref> and protocol layers used by EPP. The security
      considerations described in these other specifications apply to this
      specification as well.</t>
    </section>

  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
       
      &RFC2119;
    
    
      &RFC3688;      

      &RFC5730;

      &RFC5731;

      &RFC5890;      

      &RFC7451;      

      &I-D.ietf-eppext-idnmap;

    </references>
    
   <section title="Change History">
    <section title="Change from 00 to 01" anchor="version-00-to-01">
      <t><list style="numbers">
        <t>Amended XML Namespace section of IANA Considerations, added EPP Extension Registry section.</t>
      </list></t>
    </section>
    <section title="Change from 01 to 02" anchor="version-01-to-02">
      <t><list style="numbers">
        <t>Removed support for returning the idnTable:codePoint and idnTable:codeRange elements in the table info response based 
        on the feedback at the Registration Operations Workshop (ROW), held on March 22, 2015, prior to IETF-92.</t>
        <t>Fixed info command samples that referenced the &lt;check&gt; element instead of the &lt;info&gt; element.</t>
      </list></t>
    </section>
    <section title="Change from 02 to 03" anchor="version-02-to-03">
      <t><list style="numbers">
        <t>Ping update.</t>
      </list></t>
    </section>
    <section title="Change from 03 to 04" anchor="version-03-to-04">
      <t><list style="numbers">
        <t>Ping update.</t>
      </list></t>
    </section>
   </section>
    
  </back>

  <!-- vim: set ts=2 sw=2 expandtab: -->
</rfc>
